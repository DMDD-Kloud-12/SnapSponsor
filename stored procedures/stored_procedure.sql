CREATE OR REPLACE PROCEDURE ADD_USER (
    PI_NAME NVARCHAR2,
    PI_PROFILEIMAGE NVARCHAR2,
    PI_PHONENUMBER NVARCHAR2,
    PI_ABOUTME NCLOB,
    PI_ABOUTORGANISATION NCLOB,
    PI_EMAIL NVARCHAR2,
    PI_PASSWORD NVARCHAR2,
    PI_IS_SUPERUSER NUMBER
) AS
    E_EMAIL_EXISTS EXCEPTION;
    E_PHONE_FORMAT EXCEPTION;
    E_SUPERUSER_INVALID EXCEPTION;
    
    V_EMAIL_COUNT NUMBER;
    V_PHONE_LENGTH NUMBER;
BEGIN
    -- Check for unique email
    SELECT COUNT(USER_ID) INTO V_EMAIL_COUNT FROM USERS WHERE EMAIL = LOWER(PI_EMAIL);
    IF V_EMAIL_COUNT > 0 THEN
        RAISE E_EMAIL_EXISTS;
    END IF;
    
    -- Validate phone number format (basic check for length only as an example)
    IF LENGTH(PI_PHONENUMBER) NOT IN (10, 0) THEN
        RAISE E_PHONE_FORMAT;
    END IF;
    
    -- Check for valid superuser flag
    IF PI_IS_SUPERUSER NOT IN (0, 1) THEN
        RAISE E_SUPERUSER_INVALID;
    END IF;
    
    -- Insert user
    INSERT INTO USERS (
        USER_ID, 
        LAST_LOGIN, 
        IS_SUPERUSER, 
        CREATED_AT, 
        NAME, 
        PROFILEIMAGE, 
        PHONENUMBER, 
        ABOUTME, 
        ABOUTORGANISATION, 
        EMAIL, 
        PASSWORD
    ) VALUES (
        SEQ_USER.NEXTVAL, 
        SYSTIMESTAMP, 
        PI_IS_SUPERUSER, 
        SYSTIMESTAMP, 
        PI_NAME,
        PI_PROFILEIMAGE,
        PI_PHONENUMBER,
        PI_ABOUTME,
        PI_ABOUTORGANISATION,
        LOWER(PI_EMAIL),
        PI_PASSWORD
    );
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('USER ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_EMAIL_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('EMAIL ALREADY EXISTS');
    WHEN E_PHONE_FORMAT THEN
        DBMS_OUTPUT.PUT_LINE('PHONE NUMBER SHOULD BE 10 DIGITS');
    WHEN E_SUPERUSER_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('SUPERUSER FLAG INVALID');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_USER;
/


CREATE OR REPLACE PROCEDURE ADD_POST (
    PI_TEXT NCLOB,
    PI_IMAGE NVARCHAR2,
    PI_VENUE NCLOB,
    PI_FOOD NCLOB,
    PI_MONETARY NCLOB,
    PI_OTHER NCLOB,
    PI_USER_ID NUMBER,
    PI_ACTIVESTATUS NUMBER
) AS
    E_USER_NOT_FOUND EXCEPTION;
    E_ACTIVESTATUS_INVALID EXCEPTION;
    V_USER_COUNT NUMBER;
    V_POST_ID NUMBER;
    V_PROCESS_RESULT VARCHAR2(4000);
BEGIN
    SELECT COUNT(*) INTO V_USER_COUNT FROM USERS WHERE USER_ID = PI_USER_ID;
    IF V_USER_COUNT = 0 THEN
        RAISE E_USER_NOT_FOUND;
    END IF;

    IF PI_ACTIVESTATUS NOT IN (0, 1) THEN
        RAISE E_ACTIVESTATUS_INVALID;
    END IF;

    INSERT INTO POSTS (
        POST_ID,
        CREATED_AT,
        TEXT,
        IMAGE,
        VENUE,
        FOOD,
        MONETARY,
        OTHER,
        LIKESCOUNT,
        COMMENTSCOUNT,
        USER_ID,
        ACTIVESTATUS
    ) VALUES (
        SEQ_POST.NEXTVAL,
        SYSTIMESTAMP,
        PI_TEXT,
        PI_IMAGE,
        PI_VENUE,
        PI_FOOD,
        PI_MONETARY,
        PI_OTHER,
        0,
        0,
        PI_USER_ID,
        PI_ACTIVESTATUS
    ) RETURNING POST_ID INTO V_POST_ID;

    COMMIT;
    
     -- Call PROCESS_HASHTAGS function right after the commit
    V_PROCESS_RESULT := PROCESS_HASHTAGS(V_POST_ID, PI_TEXT);
    DBMS_OUTPUT.PUT_LINE('POST ADDED SUCCESSFULLY. POST ID: ' || V_POST_ID);
    DBMS_OUTPUT.PUT_LINE('PROCESS_HASHTAGS RESULT: ' || V_PROCESS_RESULT);
EXCEPTION
    WHEN E_USER_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('USER NOT FOUND');
    WHEN E_ACTIVESTATUS_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('INVALID ACTIVE STATUS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_POST;
/


CREATE OR REPLACE PROCEDURE ADD_COMMENT (
    PI_USER_ID NUMBER,
    PI_POST_ID NUMBER,
    PI_COMMENTS NCLOB
) AS
    E_USER_NOT_FOUND EXCEPTION;
    E_POST_NOT_FOUND EXCEPTION;
    V_USER_COUNT NUMBER;
    V_POST_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_USER_COUNT FROM USERS WHERE USER_ID = PI_USER_ID;
    IF V_USER_COUNT = 0 THEN
        RAISE E_USER_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_POST_COUNT FROM POSTS WHERE POST_ID = PI_POST_ID;
    IF V_POST_COUNT = 0 THEN
        RAISE E_POST_NOT_FOUND;
    END IF;

    INSERT INTO COMMENTS (
        COMMENT_ID,
        CREATED_AT,
        COMMENTS,
        USER_ID,
        POST_ID
    ) VALUES (
        SEQ_COMMENTS.NEXTVAL,
        SYSTIMESTAMP,
        PI_COMMENTS,
        PI_USER_ID,
        PI_POST_ID
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('COMMENT ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_USER_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('USER NOT FOUND');
    WHEN E_POST_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('POST NOT FOUND');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_COMMENT;
/


CREATE OR REPLACE PROCEDURE ADD_LIKE (
    PI_USER_ID NUMBER,
    PI_POST_ID NUMBER
) AS
    E_ALREADY_LIKED EXCEPTION;
    V_LIKE_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_LIKE_COUNT FROM LIKES WHERE USER_ID = PI_USER_ID AND POST_ID = PI_POST_ID;
    IF V_LIKE_COUNT > 0 THEN
        RAISE E_ALREADY_LIKED;
    END IF;

    INSERT INTO LIKES (
        LIKE_ID,
        CREATED_AT,
        USER_ID,
        POST_ID
    ) VALUES (
        SEQ_LIKES.NEXTVAL,
        SYSTIMESTAMP,
        PI_USER_ID,
        PI_POST_ID
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('LIKE ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_ALREADY_LIKED THEN
        DBMS_OUTPUT.PUT_LINE('USER HAS ALREADY LIKED THIS POST');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_LIKE;
/


CREATE OR REPLACE PROCEDURE ADD_TAG (
    PI_TAG NVARCHAR2,
    PI_POINT NUMBER,
    PO_TAG_ID OUT NUMBER
) AS
    E_TAG_EXISTS EXCEPTION;
    V_TAG_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_TAG_COUNT FROM TAGS WHERE TAG = UPPER(PI_TAG);
    
    IF V_TAG_COUNT > 0 THEN
        SELECT TAG_ID INTO PO_TAG_ID FROM TAGS WHERE UPPER(TAG) = UPPER(PI_TAG);
        RAISE E_TAG_EXISTS;
    END IF;
    

    INSERT INTO TAGS (TAG_ID, CREATED_AT, TAG, POINT)
    VALUES (SEQ_TAGS.NEXTVAL, SYSTIMESTAMP, UPPER(PI_TAG), PI_POINT)
    RETURNING TAG_ID INTO PO_TAG_ID;
        
    
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('TAG ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_TAG_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('TAG ALREADY EXISTS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_TAG;
/


CREATE OR REPLACE PROCEDURE ADD_POST_HASHTAG (
    PI_POST_ID NUMBER,
    PI_HASHTAG_ID NUMBER
) AS
    E_POST_NOT_FOUND EXCEPTION;
    E_TAG_NOT_FOUND EXCEPTION;
    E_ASSOCIATION_EXISTS EXCEPTION;
    V_POST_COUNT NUMBER;
    V_TAG_COUNT NUMBER;
    V_ASSOC_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_POST_COUNT FROM POSTS WHERE POST_ID = PI_POST_ID;
    IF V_POST_COUNT = 0 THEN
        RAISE E_POST_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_TAG_COUNT FROM TAGS WHERE TAG_ID = PI_HASHTAG_ID;
    IF V_TAG_COUNT = 0 THEN
        RAISE E_TAG_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_ASSOC_COUNT FROM POSTS_HASHTAGS WHERE POST_ID = PI_POST_ID AND HASHTAG_ID = PI_HASHTAG_ID;
    IF V_ASSOC_COUNT > 0 THEN
        RAISE E_ASSOCIATION_EXISTS;
    END IF;

    INSERT INTO POSTS_HASHTAGS (
        POST_ID,
        HASHTAG_ID
    ) VALUES (
        PI_POST_ID,
        PI_HASHTAG_ID
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('POST-HASHTAG ASSOCIATION ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_POST_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('POST NOT FOUND');
    WHEN E_TAG_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('TAG NOT FOUND');
    WHEN E_ASSOCIATION_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('ASSOCIATION ALREADY EXISTS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_POST_HASHTAG;
/


CREATE OR REPLACE PROCEDURE ADD_USER_HASHTAG (
    PI_USER_ID NUMBER,
    PI_HASHTAG_ID NUMBER
) AS
    E_USER_NOT_FOUND EXCEPTION;
    E_TAG_NOT_FOUND EXCEPTION;
    E_ASSOCIATION_EXISTS EXCEPTION;
    V_USER_COUNT NUMBER;
    V_TAG_COUNT NUMBER;
    V_ASSOC_COUNT NUMBER;
BEGIN
    SELECT COUNT(*) INTO V_USER_COUNT FROM USERS WHERE USER_ID = PI_USER_ID;
    IF V_USER_COUNT = 0 THEN
        RAISE E_USER_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_TAG_COUNT FROM TAGS WHERE TAG_ID = PI_HASHTAG_ID;
    IF V_TAG_COUNT = 0 THEN
        RAISE E_TAG_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_ASSOC_COUNT FROM USER_HASHTAGS WHERE USER_ID = PI_USER_ID AND HASHTAG_ID = PI_HASHTAG_ID;
    IF V_ASSOC_COUNT > 0 THEN
        RAISE E_ASSOCIATION_EXISTS;
    END IF;

    INSERT INTO USER_HASHTAGS (
        USER_ID,
        HASHTAG_ID
    ) VALUES (
        PI_USER_ID,
        PI_HASHTAG_ID
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('USER-HASHTAG ASSOCIATION ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_USER_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('USER NOT FOUND');
    WHEN E_TAG_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('TAG NOT FOUND');
    WHEN E_ASSOCIATION_EXISTS THEN
        DBMS_OUTPUT.PUT_LINE('ASSOCIATION ALREADY EXISTS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_USER_HASHTAG;
/


CREATE OR REPLACE PROCEDURE ADD_SPONSORSHIP (
    PI_POST_ID NUMBER,
    PI_SPONSEE_ID NUMBER,
    PI_SPONSOR_ID NUMBER,
    PI_STATUS NVARCHAR2
) AS
    E_POST_NOT_FOUND EXCEPTION;
    E_SPONSEE_NOT_FOUND EXCEPTION;
    E_SPONSOR_NOT_FOUND EXCEPTION;
    E_STATUS_INVALID EXCEPTION;
    V_POST_COUNT NUMBER;
    V_SPONSEE_COUNT NUMBER;
    V_SPONSOR_COUNT NUMBER;
BEGIN
    IF PI_STATUS NOT IN ('SUCCESSFUL', 'PENDING', 'CANCELLED') THEN
        RAISE E_STATUS_INVALID;
    END IF;

    SELECT COUNT(*) INTO V_POST_COUNT FROM POSTS WHERE POST_ID = PI_POST_ID;
    IF V_POST_COUNT = 0 THEN
        RAISE E_POST_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_SPONSEE_COUNT FROM USERS WHERE USER_ID = PI_SPONSEE_ID;
    IF V_SPONSEE_COUNT = 0 THEN
        RAISE E_SPONSEE_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_SPONSOR_COUNT FROM USERS WHERE USER_ID = PI_SPONSOR_ID;
    IF V_SPONSOR_COUNT = 0 THEN
        RAISE E_SPONSOR_NOT_FOUND;
    END IF;

    INSERT INTO SPONSORSHIP (
        SPONSORSHIP_ID,
        CREATED_AT,
        POST_ID,
        SPONSEE_ID,
        SPONSOR_ID,
        STATUS
    ) VALUES (
        SEQ_SPONSORSHIP.NEXTVAL,
        SYSTIMESTAMP,
        PI_POST_ID,
        PI_SPONSEE_ID,
        PI_SPONSOR_ID,
        UPPER(PI_STATUS)
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('SPONSORSHIP CREATED SUCCESSFULLY');
EXCEPTION
    WHEN E_STATUS_INVALID THEN
        DBMS_OUTPUT.PUT_LINE('INVALID STATUS');
    WHEN E_POST_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('POST NOT FOUND');
    WHEN E_SPONSEE_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('SPONSEE NOT FOUND');
    WHEN E_SPONSOR_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('SPONSOR NOT FOUND');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_SPONSORSHIP;
/


CREATE OR REPLACE PROCEDURE ADD_FOLLOWER (
    PI_FOLLOWER_ID NUMBER,
    PI_FOLLOWING_ID NUMBER
) AS
    E_SELF_FOLLOW EXCEPTION;
    E_FOLLOWER_NOT_FOUND EXCEPTION;
    E_FOLLOWING_NOT_FOUND EXCEPTION;
    E_ALREADY_FOLLOWING EXCEPTION;
    V_FOLLOWER_COUNT NUMBER;
    V_FOLLOWING_COUNT NUMBER;
    V_FOLLOWING_EXISTS NUMBER;
BEGIN
    IF PI_FOLLOWER_ID = PI_FOLLOWING_ID THEN
        RAISE E_SELF_FOLLOW;
    END IF;

    SELECT COUNT(*) INTO V_FOLLOWER_COUNT FROM USERS WHERE USER_ID = PI_FOLLOWER_ID;
    SELECT COUNT(*) INTO V_FOLLOWING_COUNT FROM USERS WHERE USER_ID = PI_FOLLOWING_ID;
    IF V_FOLLOWER_COUNT = 0 THEN
        RAISE E_FOLLOWER_NOT_FOUND;
    ELSIF V_FOLLOWING_COUNT = 0 THEN
        RAISE E_FOLLOWING_NOT_FOUND;
    END IF;

    SELECT COUNT(*) INTO V_FOLLOWING_EXISTS FROM USER_FOLLOWERS WHERE FOLLOWER_ID = PI_FOLLOWER_ID AND FOLLOWING_ID = PI_FOLLOWING_ID;
    IF V_FOLLOWING_EXISTS > 0 THEN
        RAISE E_ALREADY_FOLLOWING;
    END IF;

    INSERT INTO USER_FOLLOWERS (
        FOLLOWER_ID,
        FOLLOWING_ID
    ) VALUES (
        PI_FOLLOWER_ID,
        PI_FOLLOWING_ID
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('FOLLOWER ADDED SUCCESSFULLY');
EXCEPTION
    WHEN E_SELF_FOLLOW THEN
        DBMS_OUTPUT.PUT_LINE('CANNOT FOLLOW YOURSELF');
    WHEN E_FOLLOWER_NOT_FOUND OR E_FOLLOWING_NOT_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('USER NOT FOUND');
    WHEN E_ALREADY_FOLLOWING THEN
        DBMS_OUTPUT.PUT_LINE('ALREADY FOLLOWING THIS USER');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END ADD_FOLLOWER;
/
