SET SERVEROUTPUT ON;

DECLARE
    l_constraint_name USER_CONSTRAINTS.CONSTRAINT_NAME%TYPE;
    l_count NUMBER;
BEGIN
    FOR c IN (SELECT CONSTRAINT_NAME, TABLE_NAME FROM USER_CONSTRAINTS WHERE CONSTRAINT_TYPE = 'R')
    LOOP
        BEGIN
            EXECUTE IMMEDIATE 'ALTER TABLE ' || c.TABLE_NAME || ' DROP CONSTRAINT ' || c.CONSTRAINT_NAME;
            DBMS_OUTPUT.PUT_LINE('Dropped foreign key constraint: ' || c.CONSTRAINT_NAME);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Failed to drop constraint ' || c.CONSTRAINT_NAME || ' with error: ' || SQLERRM);
        END;
    END LOOP;

    FOR i IN (SELECT OBJECT_NAME, OBJECT_TYPE FROM USER_OBJECTS WHERE OBJECT_TYPE IN ('SEQUENCE', 'TABLE'))
    LOOP
        BEGIN
            EXECUTE IMMEDIATE 'DROP ' || i.OBJECT_TYPE || ' ' || i.OBJECT_NAME;
            DBMS_OUTPUT.PUT_LINE(i.OBJECT_TYPE || ' DROPPED: ' || i.OBJECT_NAME);
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Failed to drop ' || i.OBJECT_TYPE || ': ' || i.OBJECT_NAME || ' with error: ' || SQLERRM);
        END;
    END LOOP;
END;
/

-- Sequences
CREATE SEQUENCE SEQ_USER;
CREATE SEQUENCE SEQ_POST;
CREATE SEQUENCE SEQ_SPONSORSHIP;
CREATE SEQUENCE SEQ_COMMENTS;
CREATE SEQUENCE SEQ_LIKES;
CREATE SEQUENCE SEQ_TAGS;
CREATE SEQUENCE SEQ_USER_HASHTAGS;
CREATE SEQUENCE SEQ_USER_FOLLOWERS;

-- Tables
-- Users
CREATE TABLE USERS (
    USER_ID NUMBER PRIMARY KEY,
    LAST_LOGIN TIMESTAMP,
    IS_SUPERUSER NUMBER(1) NOT NULL CHECK (IS_SUPERUSER IN (0, 1)),
    CREATED_AT TIMESTAMP NOT NULL,
    NAME NVARCHAR2(100) NOT NULL,
    PROFILEIMAGE NVARCHAR2(200),
    PHONENUMBER NVARCHAR2(15),
    ABOUTME NCLOB,
    ABOUTORGANISATION NCLOB,
    EMAIL NVARCHAR2(150) NOT NULL UNIQUE,
    PASSWORD NVARCHAR2(255) NOT NULL
);

-- Posts
CREATE TABLE POSTS (
    POST_ID NUMBER PRIMARY KEY,
    CREATED_AT TIMESTAMP NOT NULL,
    TEXT NCLOB,
    IMAGE NVARCHAR2(200),
    VENUE NCLOB,
    FOOD NCLOB,
    MONETARY NCLOB,
    OTHER NCLOB,
    LIKESCOUNT NUMBER(11),
    COMMENTSCOUNT NUMBER(11),
    USER_ID NUMBER NOT NULL REFERENCES USERS(USER_ID),
    ACTIVESTATUS NUMBER(1) NOT NULL CHECK (ACTIVESTATUS IN (0, 1))
);

-- Comments
CREATE TABLE COMMENTS (
    COMMENT_ID NUMBER PRIMARY KEY,
    CREATED_AT TIMESTAMP NOT NULL,
    COMMENTS NCLOB,
    USER_ID NUMBER NOT NULL REFERENCES "USERS"("USER_ID"),
    POST_ID NUMBER NOT NULL REFERENCES "POSTS"("POST_ID")
);

-- Likes
CREATE TABLE LIKES (
    LIKE_ID NUMBER PRIMARY KEY,
    CREATED_AT TIMESTAMP NOT NULL,
    USER_ID NUMBER NOT NULL REFERENCES USERS(USER_ID),
    POST_ID NUMBER NOT NULL REFERENCES POSTS(POST_ID)
);

-- Tags
CREATE TABLE TAGS (
    TAG_ID NUMBER PRIMARY KEY,
    CREATED_AT TIMESTAMP NOT NULL,
    TAG NVARCHAR2(100) NOT NULL,
    POINT NUMBER(11)
);

-- Posts_Hashtags (junction table for many-to-many relationship between Posts and Tags)
CREATE TABLE POSTS_HASHTAGS (
    POST_ID NUMBER NOT NULL REFERENCES POSTS(POST_ID),
    HASHTAG_ID NUMBER NOT NULL REFERENCES TAGS(TAG_ID),
    CONSTRAINT PK_POSTS_HASHTAGS PRIMARY KEY (POST_ID, HASHTAG_ID)
);

-- User_Hashtags (junction table for many-to-many relationship between User and Tags)
CREATE TABLE USER_HASHTAGS (
    USER_ID NUMBER NOT NULL REFERENCES USERS(USER_ID),
    HASHTAG_ID NUMBER NOT NULL REFERENCES TAGS(TAG_ID),
    CONSTRAINT PK_USER_HASHTAGS PRIMARY KEY (USER_ID, HASHTAG_ID)
);

-- Sponsorship
CREATE TABLE SPONSORSHIP (
    SPONSORSHIP_ID NUMBER PRIMARY KEY,
    CREATED_AT TIMESTAMP NOT NULL,
    POST_ID NUMBER NOT NULL REFERENCES POSTS(POST_ID),
    SPONSEE_ID NUMBER NOT NULL REFERENCES USERS(USER_ID),
    SPONSOR_ID NUMBER NOT NULL REFERENCES USERS(USER_ID),
    STATUS NVARCHAR2(20) NOT NULL CHECK (STATUS IN ('SUCCESSFUL', 'PENDING', 'CANCELLED'))
);

-- User_Followers (junction table for many-to-many self-referencing relationship in User)
CREATE TABLE USER_FOLLOWERS (
    FOLLOWER_ID NUMBER NOT NULL,
    FOLLOWING_ID NUMBER NOT NULL,
    CONSTRAINT PK_USER_FOLLOWERS PRIMARY KEY (FOLLOWER_ID, FOLLOWING_ID),
    CONSTRAINT FK_FOLLOWER_ID FOREIGN KEY (FOLLOWER_ID) REFERENCES USERS(USER_ID),
    CONSTRAINT FK_FOLLOWING_ID FOREIGN KEY (FOLLOWING_ID) REFERENCES USERS(USER_ID)
);